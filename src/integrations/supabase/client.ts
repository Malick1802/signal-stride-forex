
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ugtaodrvbpfeyhdgmisn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVndGFvZHJ2YnBmZXloZGdtaXNuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQwNjA2MTUsImV4cCI6MjA0OTYzNjYxNX0.Z-71hRCpHB0YivrsTb2kZQdObcF42BQVYIQ8_yMb_JM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    // Android-specific auth settings
    flowType: 'pkce',
  },
  realtime: {
    params: {
      eventsPerSecond: 15,
      // Enhanced Android real-time settings
      heartbeatIntervalMs: 30000,
      reconnectAfterMs: (tries) => Math.min(tries * 1000, 10000),
    }
  },
  global: {
    headers: {
      'x-client-info': 'forex-signal-pro-mobile'
    },
    // Enhanced Android networking configuration
    fetch: (url, options: RequestInit = {}) => {
      // Add aggressive timeout and retry logic for Android
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 second timeout for Android
      
      return fetch(url, {
        ...options,
        signal: controller.signal,
        // Add Android-specific headers
        headers: {
          ...(options.headers || {}),
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      }).finally(() => clearTimeout(timeoutId));
    }
  }
});
